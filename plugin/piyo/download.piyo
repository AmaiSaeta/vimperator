// vim:set ft=javascript sw=4 ts=4 et :

const query = <![CDATA[
SELECT id, target, name, source, state, startTime, endTime, referrer,
currBytes, maxBytes, state
FROM moz_downloads
ORDER BY (state <> 0), endTime DESC, startTime DESC
]]>.toString();

ui.registerSource("download", {
    description: "download list",
    title: "dowload list",
    keys: ["name"],
    createView: function (item, hi) <tr style="vertical-align: top;"><td class="mark"/><td><img src={"moz-icon://"+item.$.target.spec+"?size=64"}/></td>
    <td><br/><span style="position: absolute; white-space: nowrap;color:blue;">{item.$.source.spec}</span></td>
    <td>{item.$.id}</td><td style="color:green;">{(new Date(item.$.startTime/1000)).toLocaleFormat("%y%m%d")}</td>
    <td style="width:10em;height:1em;position:relative;">
        <div class="ib" style={"left:0;height:1em;background-color:rgb(128,255,128);width:" + (item.$.percentComplete / 10) + "em;"}>
        {item.$.percentComplete}%</div></td><td>{item.$.state}</td><td>{hi.name}</td>
    </tr>,
    generator1: function () {
        return sqlquery(gDownloadMgr.DBConnection, query);
    },
    generator: function () {
        let proto = {
            get $() this.item,
            get name() this.item.displayName
        };
        for (let q in util.sqlquery(gDownloadMgr.DBConnection, query)) {
            yield {__proto__: proto, item: gDownloadMgr.getDownload(q.id)};
        }
    },
    commands: function (commands) {
        ["cancel", "remove", "pause", "resume", "retry"].forEach(function (n) {
            commands.add([n], n + " download", function (args, modifiers) {
                modifiers.items.forEach(function (i) {
                    gDownloadMgr[n + "Download"](i.item.item.id);
                });
            });
        });
        commands.add(["opend[ir]"], "!open directory", function (args, modifiers) {
            let file = modifiers.items[0].item.item.targetFile;
            file.parent.QueryInterface(Ci.nsILocalFile).reveal();
        });
    }
});
