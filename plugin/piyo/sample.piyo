// vim:set ft=javascript sw=4 ts=4 et :

piyo.ui.registerSource("tab", {
    createView: function (item, hi)
        <tr><td align="right">{item.tab._tPos + 1}</td><td>{piyo.util.icon16(item.icon)}</td><td>{hi.label}</td></tr>,
    description: "sample source",
    title: "tab list(demo)",
    default: "select",
    keys: ["label"],
    createItem: function (ui) {
        this.title = "tab list";
        this.items = [ {
                tab: t,
                get icon() this.tab.image || DEFAULT_FAVICON,
                get label() [this.title, this.url],
                get url() this.tab.linkedBrowser.contentDocument.location.href,
                get title() this.tab.label
            }
            //for ([, t] in iter(gBrowser.tabs))
            for ([, t] in iter(gBrowser.mTabs))
        ];
    },
    commands: function (commands) {
        commands.add(["select"], "select", function (args, modifiers) {
            gBrowser.selectedTab = modifiers.items[0].item.tab;
        });

        let yankMethod = {
            url: function (item) item.item.url,
            title: function (item) item.item.title,
        };
        commands.add(["yank"], "copy", function (args, modifiers) {
            let targets = args["-type"] || ["url"];
            let separator = args["-s"] || ",";

            let str = modifiers.items.map(function (item)
                targets.map(function (func) yankMethod[func](item)).join(separator)
            ).join("\n");

            this.setTimeout(function () 
                util.copyToClipboard(str, true), 0);
        }, {
            options:[
                [["-type", "-t"], commands.OPTION_LIST, null, [[a,a] for(a in yankMethod)], true],
                [["-s"], commands.OPTION_STRING, null]
            ]
        });
        commands.add(["close"], "close tab", function (args, modifiers) {
            modifiers.items.forEach(function (item) {
                gBrowser.removeTab(item.item.tab);
            });
        });
        commands.add("win[dow]", "move window", function (args, modifiers) {
            let tabs = modifiers.items.map(function(i) i.item.tab);
            piyo.ui.open("window-2", "", {user:{tabs: tabs}});
            modifiers.noquit = true;
        });
    }
});

// use migemo macther
piyo.ui.registerSource("tab-m", "tab", {
    matcher: piyo.util.migemoMatcher,
});

piyo.ui.registerSource("window", {
    description: "window",
    // todo: icon...
    createView: function (item, hi)
        <tr><td>{item.active ? "%": ""}</td><td>{hi.title}</td><td>{item.win.document.baseURI}</td></tr>
    ,
    keys: ["title"],
    default: "select",
    windowtype: null,
    createItem: function (ui) {
        this.items = [{
            win: w,
            title: w.document.title,
            active: window === w,
        } for (w in iter(services.get("windowMediator").getEnumerator(this.windowtype)))];
    },
    commands: function (commands) {
        commands.add(["select"], "focus window", function (args, modifiers) {
            modifiers.items[0].item.win.focus();
        });
        commands.add(["close"], "close window", function (args, modifiers) {
            let closeWindow = "closeWindow";
            let closeSelf = false;
            modifiers.items.forEach(function (item) {
                let win = item.item.win;
                if (win === window) {
                    closeSelf = true;
                    return;
                }
                if (closeWindow in win) win[closeWindow](true);
                else win.close();
            });

            if (closeSelf) {
                let win = window;
                if (closeWindow in win) win[closeWindow](true);
                else win.close();
            }
        });
    }
});

piyo.ui.registerSource("window-navi", "window", {
    windowtype: "navigator:browser",
});

piyo.ui.registerSource("window-2", "window-navi", {
    commands: function (commands) {
        commands.stop = true;
        commands.add(["select"], "", function (args, modifiers) {
            let win = modifiers.items[0].item.win;
            if (window === win) {
                piyo.ui.echoerr("target window is same");
                return;
            }
            modifiers.user.tabs.forEach(function (src) {
                let dest = win.gBrowser.addTab();

                win.gBrowser.swapBrowsersAndCloseOther(dest, src);
            });
            win.focus();
        });
    }
});

piyo.ui.registerSource("storageHistory", {
    abstract: true,
    createView: function (item, hi) <tr><td align="right">{item.time}</td><td>{hi.value}</td></tr>,
    description: "storage array manager",
    title: "storage array",
    default: "delete",
    keys: ["value"],
    default: "open",
    createItem: function (ui) {
        let array = modules.storage[this.storageKey];
        let now = Date.now();

        function toString(time) {
            var s;
            [[1000, function (t) <>{t}ms</>],
             [60,   function (t) <>{t.toFixed(2)}s </>],
             [60,   function (t) <>{t.toFixed(2)}m </>],
             [24,   function (t) <>{t.toFixed(2)}h </>],
            ].some(function ([t, fmt]) {
                if (time < t) {
                    s = fmt(time);
                    return true;
                } else {
                    time /= t;
                    return false;
                }
            });
            return s || <>{time.toFixed(2)}d </>;
        }
        this.items = [{
                v: array.get(i),
                get time() toString(now - this.v.timestamp),
                get value() this.v.value
            } for (i in util.range(0, array.length))
        ];
        this.items.sort(function(a, b) b.v.timestamp - a.v.timestamp);
    },
    commands: function (commands) {
        commands.add(["delete"], "delete", function (args, modifiers) {
            let items = [];
            let source = modifiers.items[0].source;
            let list   = modifiers.items.filter(function (i) i.mark).map(function (i) i.item.v);

            let array = modules.storage[source.storageKey];
            array.mutate("filter", function (i) list.indexOf(i) < 0);
        });
    }
});

piyo.ui.registerSource("command-mru", "storageHistory", {
    title: "history command",
    storageKey: "history-command",
    commands: function (commands) {
        commands.add(["open"], "open command", function (args, modifiers) {
            commandline.setTimeout(function() this.open("", modifiers.items[0].item.v.value, modes.EX), 0);
        });
    }
});

// open command guard
piyo.ui.registerSource("command-mru2", "command-mru", {
    commands: function (commands) {
        commands.addGuadCommand(["open"]);
    }
});

piyo.ui.registerSource("closetab-mru", "tab", {
    description: "sample source",
    title: "suaua",
    default: "select",
    keys: ["label"],
    createItem: function (ui) {
        let session = JSON.parse(services.get("sessionStore").getClosedTabData(window));
        this.items = session.map(function (s, n) {
            return {
                s: s,
                tab: {_tPos: s.pos},
                get icon() this.s.image || DEFAULT_FAVICON,
                get label() this.s.title,
                get index() n
            };
        });
    },
    commands: function (commands) {
        commands.stop = true;
        commands.add(["restore"], "restore closed tab", function (args, modifiers) {
            let ss = services.get("sessionStore");
            modifiers.items.forEach(function (i) {
                let state = JSON.stringify(i.item.s.state);
                let tab = gBrowser.addTab();
                ss.setTabState(tab, state);
                gBrowser.selectedTab = tab;
            });
        });
    }
});

//piyo.ui.addAlias("ch", ["command-mru", "search-mru"]);

function onUnload() { }
